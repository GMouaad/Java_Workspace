/**
 * Filename : MainContent.java
 * Description : GUI class, Main Content
 * Author : Mouaad Gssair
 */
import java.awt.FileDialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JMenu;
import javax.swing.JLabel;
import javax.swing.JTextField;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;

import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;

import javax.swing.JPasswordField;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JSeparator;
import java.awt.Color;
import javax.swing.SwingConstants;
import javax.swing.JTextArea;

public class MainContent extends JPanel {

	//HOST Components
    String SFTPHOST;
    int SFTPPORT = 22;
    String SFTPUSER;
    String SFTPPASS;
    String SFTPWORKINGDIR;

    //SFTP_Channel Compenents
    Session session = null;
    Channel channel = null;
    ChannelSftp channelSftp = null;

	//UI Components
	private String filePath,fileName;
	private File selectedFile,fileToDownload;
	private JFrame frameInstance;
	private JTextField hostTxtField;
	private JTextField portTxtField;
	private JTextField userTxtField;
	private JPasswordField passwordField;
	private JTextField txtFilePath;
	private JTextField destinationPath;
	private JTextField txtOrgFilePath;
	private JTextField txtDestdir;
	private JTextField txtFileName;
	
	
	/**
	 * Create the panel.
	 */
	public MainContent(JFrame frameInstance) {
		setLayout(null);
		this.frameInstance = frameInstance;
		
		JMenuBar menuBar = new JMenuBar();
		menuBar.setBounds(0, 0, 720, 22);
		add(menuBar);
		
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);
		
		JMenuItem mntmSaveSettings = new JMenuItem("Save Settings");
		mnFile.add(mntmSaveSettings);
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mnFile.add(mntmExit);
		JMenu mnHelp = new JMenu("Help");
		menuBar.add(mnHelp);
		
		JMenuItem mntmAbout = new JMenuItem("About");
		mntmAbout.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//TODO : change link to a URL Hyperlink , see docm. https://binfalse.de/2011/01/03/adding-a-hyperlink-to-java-swing-gui/
				JOptionPane.showMessageDialog(null,"\t\t\t File Exchange \n\n"
						+ "Software developped by Mouaad Gssair \n"
						+ "This Software is an Open-Source Software available in GitHub :\n"
						+ "https://github.com/GMouaad/Java_Workspace/tree/master/FileExchange\n"
						+ "For any other Informations, please contact Mgsair@gmail.com\n");
			}
		});
		mnHelp.add(mntmAbout);
		
		JLabel lblHost = new JLabel("Host :");
		lblHost.setBounds(30, 51, 61, 16);
		add(lblHost);
		
		JLabel lblPort = new JLabel("Port :");
		lblPort.setBounds(30, 79, 61, 16);
		add(lblPort);
		
		JLabel lblUser = new JLabel("User :");
		lblUser.setBounds(30, 107, 61, 16);
		add(lblUser);
		
		JLabel lblPassword = new JLabel("Password :");
		lblPassword.setBounds(30, 135, 80, 16);
		add(lblPassword);
		
		hostTxtField = new JTextField();
		hostTxtField.setBounds(103, 46, 130, 26);
		add(hostTxtField);
		hostTxtField.setColumns(10);
		
		portTxtField = new JTextField();
		portTxtField.setBounds(103, 74, 130, 26);
		add(portTxtField);
		portTxtField.setColumns(10);
		
		userTxtField = new JTextField();
		userTxtField.setBounds(103, 102, 130, 26);
		add(userTxtField);
		userTxtField.setColumns(10);
		
		passwordField = new JPasswordField();
		passwordField.setBounds(103, 130, 130, 26);
		add(passwordField);
		
		JLabel lblFile = new JLabel("File :");
		lblFile.setBounds(294, 83, 61, 16);
		add(lblFile);
		
		JLabel lblPath = new JLabel("Dest. Path :");
		lblPath.setBounds(294, 111, 79, 16);
		add(lblPath);
		
		txtFilePath = new JTextField();
		txtFilePath.setText("");
		txtFilePath.setBounds(385, 78, 130, 26);
		add(txtFilePath);
		txtFilePath.setColumns(10);
		
		destinationPath = new JTextField();
		destinationPath.setBounds(385, 106, 130, 26);
		add(destinationPath);
		destinationPath.setColumns(10);
		
		JButton btnSelectFile = new JButton("Select File");
		btnSelectFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				selectFile();
				
			}

			
		});
		btnSelectFile.setBounds(513, 78, 117, 29);
		add(btnSelectFile);
		
		JButton btnSend = new JButton("Send");
		btnSend.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				sendFile();
			}
		});
		btnSend.setBounds(423, 141, 117, 29);
		add(btnSend);
		
		JLabel lblUpload = new JLabel("Upload");
		lblUpload.setBounds(405, 48, 61, 16);
		add(lblUpload);
		
		JLabel lblDownload = new JLabel("Download");
		lblDownload.setBounds(405, 174, 80, 16);
		add(lblDownload);
		
		JLabel lblFilePath = new JLabel("File Path :");
		lblFilePath.setBounds(294, 202, 61, 16);
		add(lblFilePath);
		
		JLabel lblDestPath = new JLabel("Dest. Path :");
		lblDestPath.setBounds(294, 259, 79, 16);
		add(lblDestPath);
		
		txtOrgFilePath = new JTextField();
		txtOrgFilePath.setBounds(385, 197, 130, 26);
		add(txtOrgFilePath);
		txtOrgFilePath.setColumns(10);
		
		txtDestdir = new JTextField();
		txtDestdir.setBounds(385, 254, 130, 26);
		add(txtDestdir);
		txtDestdir.setColumns(10);
		
		JButton btnSelectDir = new JButton("Select Dir.");
		btnSelectDir.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				selectDir();
			}
		});
		btnSelectDir.setBounds(513, 254, 117, 29);
		add(btnSelectDir);
		
		JButton btnDownload = new JButton("Download");
		btnDownload.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				downloadFile();			}
		});
		btnDownload.setBounds(423, 292, 117, 29);
		add(btnDownload);
		
		JLabel lblFilename = new JLabel("Filename :");
		lblFilename.setBounds(294, 230, 79, 16);
		add(lblFilename);
		
		txtFileName = new JTextField();
		txtFileName.setBounds(385, 225, 130, 26);
		add(txtFileName);
		txtFileName.setColumns(10);
		
		JTextArea txtrLogs = new JTextArea();
		txtrLogs.setText("Logs");
		txtrLogs.setBounds(30, 202, 220, 160);
		add(txtrLogs);
		
		JLabel lblLogs = new JLabel("Logs",SwingConstants.CENTER);
		lblLogs.setBounds(103, 174, 61, 16);
		add(lblLogs);
		
		
	}
	protected void downloadFile() {
		if((txtFileName.getText() != "") && (hostTxtField.getText() != "") && (passwordField.getText() != "") && (userTxtField.getText() != "") && (destinationPath.getText() != ""))
		{
			SFTPUSER = userTxtField.getText();
			SFTPHOST = hostTxtField.getText();
			SFTPPORT = Integer.parseInt(portTxtField.getText());
			SFTPPASS = String.valueOf(passwordField.getPassword());
			SFTPWORKINGDIR = txtOrgFilePath.getText();
			fileName = txtFileName.getText();
			try {
	            JSch jsch = new JSch();
	            session = jsch.getSession(SFTPUSER, SFTPHOST, SFTPPORT);
	            session.setPassword(SFTPPASS);
	            
	            java.util.Properties config = new java.util.Properties();
	            config.put("StrictHostKeyChecking", "no");
	            session.setConfig(config);
	            session.connect();
	            channel = session.openChannel("sftp");
	            channel.connect();
	            channelSftp = (ChannelSftp) channel;
	            channelSftp.cd(SFTPWORKINGDIR);
	            byte[] buffer = new byte[1024];
	            BufferedInputStream bis = new BufferedInputStream(channelSftp.get(fileName));
	            File newFile = new File(txtDestdir.getText()+fileName);
	            OutputStream os = new FileOutputStream(newFile);
	            BufferedOutputStream bos = new BufferedOutputStream(os);
	            int readCount;
	            while ((readCount = bis.read(buffer)) > 0) {
	                System.out.println("Writing: ");
	                bos.write(buffer, 0, readCount);
	            }
	            bis.close();
	            bos.close();
	            System.out.println("File transfered");
	        } catch (Exception ex) {
	            ex.printStackTrace();
	            System.out.println(ex.getMessage());
	        }
		}
		
	}
	protected void selectDir() {
		
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Open Resource File");
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		int result = fileChooser.showOpenDialog(frameInstance);
        if (result == JFileChooser.APPROVE_OPTION) 
            {
            	File chosenDir = fileChooser.getSelectedFile();
                txtDestdir.setText(chosenDir.getAbsolutePath());
                System.out.println("Directory = "+chosenDir.getAbsolutePath());
            }else 
            {
            	System.out.println("no Directory selected");
            	
            }
	}
	protected void sendFile() {
		
		if((hostTxtField.getText() != "") && (passwordField.getText() != "") && (userTxtField.getText() != "") && (destinationPath.getText() != ""))
		{
			SFTPUSER = userTxtField.getText();
			SFTPHOST = hostTxtField.getText();
			SFTPPORT = Integer.parseInt(portTxtField.getText());
			SFTPPASS = String.valueOf(passwordField.getPassword());
			SFTPWORKINGDIR = destinationPath.getText();
			try {
	            JSch jsch = new JSch();
	            session = jsch.getSession(SFTPUSER, SFTPHOST, SFTPPORT);
	            session.setPassword(SFTPPASS);
	            java.util.Properties config = new java.util.Properties();
	            config.put("StrictHostKeyChecking", "no");
	            session.setConfig(config);
	            session.connect();
	            channel = session.openChannel("sftp");
	            channel.connect();
	            channelSftp = (ChannelSftp) channel;
	            channelSftp.cd(SFTPWORKINGDIR);
	            FileInputStream fis = new FileInputStream(selectedFile);
	            channelSftp.put(fis, selectedFile.getName());
	            fis.close();
	            System.out.println("File transfered");
	        } catch (Exception ex) {
	            ex.printStackTrace();
	            System.out.println(ex.getMessage());
	        }
		}
		
	}
	protected void selectFile() {
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Open Resource File");
		fileChooser.showOpenDialog(frameInstance);
		selectedFile = fileChooser.getSelectedFile();
		if(selectedFile != null)
		{
			filePath = selectedFile.getAbsolutePath();
			txtFilePath.setText(filePath);
			System.out.println("File selected");
		}
		else
		{
			System.out.println("No File selected");
		}
		
		
	}
}
