/**
 * Project : IP_Socket_GUI
 * Filename : frame1.java
 * Description :
 * Author : Mouaad Gssair
 * Date : Oct  2017
 * Modified : Nov 15, 2017
*/

import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;

import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.Button;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Label;
import java.awt.Font;
import javax.swing.JSeparator;
import javax.swing.SwingConstants;
import java.awt.List;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.JList;
import javax.swing.JLabel;
import java.awt.Panel;
import javax.swing.JToggleButton;
import javax.swing.JCheckBox;

public class frame1 {

	private JFrame frame;
	
	// Connect status constants
	   final static int DISCONNECTED = 0;
	   final static int BEGIN_CONNECT = 1;
	   final static int CONNECTED = 2;
	   
	// Connection info
	   public static String hostIP = "localhost";
	   public static int port = 1234;
	   public static int connectionStatus = DISCONNECTED;
	   public static boolean isHost = true;

	// Connection Settings
	private static ServerSocket mServerSocket;
	private static Socket mSocket;
	private static BufferedReader mBufferedReader;
	private static InputStreamReader mInputStream;
	private static String message="";
	
	private JTextField textField_1;
	private JTextField textField_2;
	private JTextField textField_3;
	
	/**
	 * Launch the application.
	 * 
	 */
	public static void main(String[] args) throws IOException {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					frame1 window = new frame1();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		try{
			mServerSocket = new ServerSocket(5000);
			mSocket = mServerSocket.accept();
			// Reader to receive data
			mInputStream = new InputStreamReader(mSocket.getInputStream());
			message = mBufferedReader.readLine();
			
			System.out.println(message);
			
			mInputStream.close();
			mBufferedReader.close();
			mSocket.close();
			mServerSocket.close();
			
		} catch(IOException e){
			e.printStackTrace();
		}
	}

	/**
	 * Create the application.
	 */
	public frame1() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.getContentPane().setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		frame.setBounds(100, 100, 650, 450);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		TextField textField = new TextField();
		textField.setBounds(328, 358, 224, 22);
		frame.getContentPane().add(textField);
		
		Button button = new Button("Send");
		button.setFont(new Font("Liberation Serif", Font.PLAIN, 12));
		button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			}
		});
		button.setBounds(554, 358, 70, 22);
		frame.getContentPane().add(button);
		
		Label label = new Label("Host IP :");
		label.setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		label.setBounds(32, 13, 60, 22);
		frame.getContentPane().add(label);
		
		Label label_1 = new Label("Port :");
		label_1.setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		label_1.setBounds(32, 41, 60, 22);
		frame.getContentPane().add(label_1);
		
		textField_1 = new JTextField();
		textField_1.setBounds(98, 13, 110, 22);
		frame.getContentPane().add(textField_1);
		textField_1.setColumns(10);
		
		textField_2 = new JTextField();
		textField_2.setColumns(10);
		textField_2.setBounds(98, 41, 110, 22);
		frame.getContentPane().add(textField_2);
		
		textField_3 = new JTextField();
		textField_3.setBounds(328, 154, 296, 198);
		frame.getContentPane().add(textField_3);
		textField_3.setColumns(10);
		
		JButton btnConnect = new JButton("Connect");
		btnConnect.setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		btnConnect.setBounds(411, 13, 100, 23);
		frame.getContentPane().add(btnConnect);
		
		JButton btnDisconnect = new JButton("Disconnect");
		btnDisconnect.setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		btnDisconnect.setBounds(411, 41, 100, 23);
		frame.getContentPane().add(btnDisconnect);
		
		JButton btnChangeHost = new JButton("Change Host");
		btnChangeHost.setBounds(218, 13, 100, 23);
		frame.getContentPane().add(btnChangeHost);
		
		JButton btnChangePort = new JButton("Change Port");
		btnChangePort.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			}
		});
		btnChangePort.setBounds(218, 41, 100, 23);
		frame.getContentPane().add(btnChangePort);
		
		Panel panel = new Panel();
		panel.setBounds(10, 154, 296, 226);
		frame.getContentPane().add(panel);
		panel.setLayout(null);
		
		Label label_2 = new Label("Sensors State  ");
		label_2.setAlignment(Label.CENTER);
		label_2.setBounds(88, 10, 115, 24);
		panel.add(label_2);
		label_2.setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		
		Label label_3 = new Label("Sensors 1 : ");
		label_3.setAlignment(Label.CENTER);
		label_3.setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		label_3.setBounds(10, 60, 115, 24);
		panel.add(label_3);
		
		Label label_4 = new Label("Sensors 2 : ");
		label_4.setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		label_4.setAlignment(Label.CENTER);
		label_4.setBounds(10, 90, 115, 24);
		panel.add(label_4);
		
		Label label_5 = new Label("Sensors 3 : ");
		label_5.setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		label_5.setAlignment(Label.CENTER);
		label_5.setBounds(10, 120, 115, 24);
		panel.add(label_5);
		
		Label label_6 = new Label("Sensors 4 : ");
		label_6.setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		label_6.setAlignment(Label.CENTER);
		label_6.setBounds(10, 150, 115, 24);
		panel.add(label_6);
		
		JCheckBox chckbxNewCheckBox = new JCheckBox("On");
		chckbxNewCheckBox.setSelected(true);
		chckbxNewCheckBox.setBounds(165, 60, 60, 24);
		panel.add(chckbxNewCheckBox);
		
		JCheckBox checkBox = new JCheckBox("On");
		checkBox.setSelected(true);
		checkBox.setBounds(165, 90, 60, 24);
		panel.add(checkBox);
		
		JCheckBox checkBox_1 = new JCheckBox("On");
		checkBox_1.setSelected(true);
		checkBox_1.setBounds(165, 120, 60, 24);
		panel.add(checkBox_1);
		
		JCheckBox checkBox_2 = new JCheckBox("On");
		checkBox_2.setSelected(true);
		checkBox_2.setBounds(165, 150, 60, 24);
		panel.add(checkBox_2);
		
		JButton btnRefresh = new JButton("Refresh");
		btnRefresh.setFont(new Font("Liberation Serif", Font.PLAIN, 14));
		btnRefresh.setBounds(108, 192, 89, 23);
		panel.add(btnRefresh);
		
		JSeparator separator = new JSeparator();
		separator.setOrientation(SwingConstants.VERTICAL);
		separator.setBounds(317, 154, 5, 225);
		frame.getContentPane().add(separator);
		
		JMenuBar menuBar = new JMenuBar();
		frame.setJMenuBar(menuBar);
		
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mnFile.add(mntmExit);
		
		JMenu mnEdit = new JMenu("Edit");
		menuBar.add(mnEdit);
		
		JMenu mnRun = new JMenu("Run");
		menuBar.add(mnRun);
		
		JMenuItem mntmScan = new JMenuItem("Scan");
		mnRun.add(mntmScan);
		
		JMenu mnHelp = new JMenu("Help");
		menuBar.add(mnHelp);
	}
}
