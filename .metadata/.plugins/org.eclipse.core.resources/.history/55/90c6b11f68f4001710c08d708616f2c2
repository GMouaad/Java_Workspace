/**
 * @Filename : MainContent.java
 * Description : Subclasse of JPanel, contains all the content of the Frame.
 * @author : Mouaad Gssair
 * Imm.Nummer : 294618
 * 
*/

import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JButton;
import javax.swing.JComboBox;
import java.awt.event.ActionListener;
import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import javax.swing.JLabel;

public class MainContent extends JPanel {

	private static int counter=0;
	private static GenericTest[] genericTestArray =  new GenericTest[10];
	private static GenericTest actualTest;
	private JLabel lblAnalysLabel;
	private JComboBox comboBox;
	
	/**
	 * Create the panel.
	 */
	public MainContent() 
	{
		setLayout(null);
		
		//BackgroundPanel background = new BackgroundPanel();
		//background.paint((Graphics) this);
		
		JMenuBar menuBar = new JMenuBar();
		menuBar.setBounds(0, 0, 734, 22);
		add(menuBar);
		
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);
		
		//add Diagramm
		//Diagram diagram = new Diagram(this);
		//this.add(diagram,BorderLayout.CENTER);
		
		JMenuItem mntmSave = new JMenuItem("Save");
		mntmSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//TODO : implement Function
				JOptionPane.showMessageDialog(null,"Not implimented yet !");
			}
		});
		mnFile.add(mntmSave);
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mntmExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
		mnFile.add(mntmExit);
		
		JMenu mnTest = new JMenu("Test");
		menuBar.add(mnTest);
		
		JMenuItem mntmNew = new JMenuItem("New");
		mntmNew.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(counter < 11)
				{
					if((counter % 2) == 0)
					{
						genericTestArray[counter] = new FitnessTest("Test"+(counter +1));
						comboBox.addItem(genericTestArray[counter]);
						comboBox.setSelectedItem(genericTestArray[counter]);
						counter++;
						repaint();
					}
					else
					{
						genericTestArray[counter] = new SchellongTest("Test"+(counter +1));
						comboBox.addItem(genericTestArray[counter]);
						comboBox.setSelectedItem(genericTestArray[counter]);
						counter++;
						repaint();
					}
				}
			}
		});
		mnTest.add(mntmNew);
		
		JMenuItem mntmEdit = new JMenuItem("Edit");
		mntmEdit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//TODO : implement Function
				JOptionPane.showMessageDialog(null,"Not implimented yet !");
			}
		});
		mnTest.add(mntmEdit);
		
		JMenuItem mntmPrint = new JMenuItem("Print");
		mntmPrint.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//TODO : implement Function
				JOptionPane.showMessageDialog(null,"Not implimented yet !");
			}
		});
		mnTest.add(mntmPrint);
		
		JMenu mnMeasurement = new JMenu("Measurement");
		menuBar.add(mnMeasurement);
		
		JMenuItem mntmRead = new JMenuItem("Read");
		mntmRead.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				getActualTest().readValues();
				repaint();
			}
		});
		mnMeasurement.add(mntmRead);
		
		JMenuItem mntmLoad = new JMenuItem("Load");
		mntmLoad.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//TODO : implement Function
				JOptionPane.showMessageDialog(null,"Not implimented yet !");
				//comboBox.setSelectedItem(genericTestArray[counter]);
			}
		});
		mnMeasurement.add(mntmLoad);
		
		JMenuItem mntmSaveData = new JMenuItem("Save Data");
		mntmSaveData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//TODO : implement Function
				JOptionPane.showMessageDialog(null,"Not implimented yet !");
			}
		});
		mnMeasurement.add(mntmSaveData);
		
		JMenu mnHelp = new JMenu("Help");
		menuBar.add(mnHelp);
		
		JMenuItem mntmAbout = new JMenuItem("About");
		mntmAbout.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//TODO : change link to a URL Hyperlink , see docm. https://binfalse.de/2011/01/03/adding-a-hyperlink-to-java-swing-gui/
				JOptionPane.showMessageDialog(null,"\t\t\t Blood Pressure Measurement \n\n"
						+ "Software developped by Mouaad Gssair \n"
						+ "This Software is an Open-Source Software available in GitHub :\n"
						+ "https://github.com/GMouaad/Java_Workspace/tree/master/BloodPressureMeasurement\n"
						+ "For any other Informations, please contact Mgsair@gmail.com\n");
			}
		});
		mnHelp.add(mntmAbout);
		
		JButton btnStartTest = new JButton("Start Test");
		btnStartTest.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				actualTest.startTest();
			
			}
		});
		btnStartTest.setBounds(6, 83, 146, 29);
		add(btnStartTest);
		
		JButton btnReadButton = new JButton("Read Measurement");
		btnReadButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				getActualTest().readValues();
				repaint();
			}
		});
		btnReadButton.setBounds(6, 124, 146, 29);
		add(btnReadButton);
		
		comboBox = new JComboBox();
		comboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				actualTest = (GenericTest) comboBox.getSelectedItem();
				repaint();
			}
		});
		comboBox.setToolTipText("");
		comboBox.setBounds(6, 165, 146, 27);
		add(comboBox);
		
		JButton btnExit = new JButton("Exit");
		btnExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
		btnExit.setBounds(6, 204, 146, 29);
		add(btnExit);
		
		lblAnalysLabel = new JLabel("Analysing");
		lblAnalysLabel.setBounds(164, 55, 200, 16);
		add(lblAnalysLabel);
		
		JPanel mDiagram = new Diagram(this);
		mDiagram.setBounds(164, 83, 536, 361);
		add(mDiagram);

	}
	public GenericTest getActualTest(){
		return actualTest;
	}
	public void setAnalysLabel(String text)
	{
		lblAnalysLabel.setText(text);
	}
}
